# Abdullah Barghouti DTM Tool - Trust Model Simulator Portland State University
# Fall 2020

import sys
import csv
import argparse
import pathlib
import time
import math

import pandas as pd
from datetime import date

#take in user arguments
ap = argparse.ArgumentParser()
ap.add_argument('-f', '--file', required=True, metavar='',
 help = 'name of the file that will be generated')
ap.add_argument('-e', '--equation', required=True, metavar='',
 help = 'the equation to be used to calculate trust')
ap.add_argument('-d', '--debug', required=False, metavar='',
 help = 'runs simulator in debug mode. Prints with user input')
args = ap.parse_args()

fileName = args.file
sfn = fileName.split(".csv")
simOutFileName = sfn[0] + "_SimOut.csv"

#Weights 
ALPHA = 10
BETA = 2
DELTA = 1
GAMMA = 0.05

#Inital variables
n_SDTT = 0
n_AvgTX = 0
MAX_COMMFREQ = 0.0
ACTOR_MAX_COMMFREQ = {'DCM': 0.0, 'DTM': 0.0,
 'DERAS': 0.0, 'DER': 0.0}
MIN_TSLC = 100
ACTOR_MIN_TSLC = {'DCM': 100000.0, 'DTM': 100000.0,
 'DERAS': 100000.0, 'DER': 100000.0}

#load in threshold information into dictionaries
threshDict_over = {
    "distrust score" : 50,
    "timeout count": 2,
    "alert count" : 2,
    "time since last communication": 700
}

threshDict_under = {
    "trust score" : .1,
    "certainty" : .1,
    "relative factor of certainty": .5,
    "communication frequency": 1,
}

# response block thresholds 
R_THRESH_TS = 4
R_THRESH_DS = 1.6
R_THRESH_C = 0.8
R_THRESH_TotMsg = 10
R_THRESH_CommFrq = 3.3
R_THRESH_CommFrq_HIGH = 6
R_THRESH_TxT = 40
R_THRESH_TSLC = 900
R_THRESH_RFC = 0.5

# response list
DTM_response = []
#increase to increase message freq
CFC = 0

#time stamp increment 
TIMESTAMP = 1

TEMP = 0

#MVoT Parameters
param = {"trust score" : 0,
"reputation" : 0,
"distrust score" : 0,
"certainty" : 0.1,
"relative factor of certainty": 0,
"expected message count" : 0,
"unexpected message count" : 0,
"total message count" : 0,
"time stamp" : 0,
"registration date" : 0,
"communication frequency" : 0,
"message transit time" : 0,
"average transit time" : 0,
"time since last communication" : 0,
"timeout count" : 0,
"alert count" : 0,
"other action count" : 0,
"SD transit time" : 0,
"Max CommFreq" : 0.0,
"Min TSLC" : 100000.0,
#"DTM response:" : 0
}

TIME = time.time()

#Current MVoT Dict
currentTrustVector = {'DCM': param, 'DTM': param.copy(),
'DERAS': param.copy(), 'DER': param.copy()}

#Prev MVoT Dict
oldTrustVector = {'DCM': param.copy(), 'DTM': param.copy(),
 'DERAS': param.copy(), 'DER': param.copy()}
#               0   1       2           3
actorList = {'DCM', 'DTM', 'DERAS' , 'DER'}

initalTime = {0,0,0,0}


#read from data (csv) file
'''
    this function is in charge of updating message counts and takes in a full
    row from the csv file generated by the trust model data generator 
''' 
def messageCount(current_row):
    actor = current_row[0]
    
    #update old vector 
    oldTrustVector[actor]['unexpected message count'] = (
        currentTrustVector[actor]['unexpected message count'])
    oldTrustVector[actor]['expected message count'] = (
        currentTrustVector[actor]['expected message count'])
    oldTrustVector[actor]['total message count'] = (
        currentTrustVector[actor]['total message count'])

    print(" oldTrustVector[actor]['unexpected message count']",
     oldTrustVector[actor]['unexpected message count'])
    if (row[1] == 'Ex'):
        #update ex count 
        currentTrustVector[actor]['expected message count'] += 1
    else:
        #update unex count
        currentTrustVector[actor]["unexpected message count"] += 1
        print("currentTrustVector[actor]['unexpected message count']" ,
        currentTrustVector[actor]['unexpected message count'])

    #update total message 
    currentTrustVector[actor]["total message count"] = (currentTrustVector[actor]['expected message count'] + 
    currentTrustVector[actor]["unexpected message count"])

'''
    this function is in charge of updating time related MVoT variables and takes
    in a full row from the csv file generated by the trust model data generator 
'''
def timeKeeping(current_row):
    #get actor name
    actor = current_row[0]
    print(actor)

    #time stamp set time stamp from 3rd col of generated data file
    print("old time stamp  = ", oldTrustVector[actor]["time stamp"])  
     
    currentTrustVector[actor]["time stamp"] = float(current_row[2])

    #normal operations, update time stamp and TSLC
    if (currentTrustVector[actor]["total message count"] > 1):
        currentTrustVector[actor]["time since last communication"] = (currentTrustVector[actor]["time stamp"]
         - oldTrustVector[actor]["time stamp"])
        #normalize TSLC
        global MIN_TSLC
        if (currentTrustVector[actor]["time since last communication"] < ACTOR_MIN_TSLC[actor]):
            ACTOR_MIN_TSLC[actor] = currentTrustVector[actor]["time since last communication"]
            currentTrustVector[actor]["Min TSLC"] = ACTOR_MIN_TSLC[actor]

        #calculate normalized comm freq
        if (currentTrustVector[actor]["communication frequency"] > ACTOR_MAX_COMMFREQ[actor]):
            ACTOR_MAX_COMMFREQ[actor] = currentTrustVector[actor]["communication frequency"]
            currentTrustVector[actor]["Max CommFreq"] = ACTOR_MAX_COMMFREQ[actor]

    #first incounter. Set registration to be current time (time stamp) and TSLC
    #to zero
    if (currentTrustVector[actor]["registration date"] == 0):
        currentTrustVector[actor]["registration date"] = currentTrustVector[actor]["time stamp"]
        currentTrustVector[actor]["time since last communication"] = 0
        oldTrustVector[actor]["time stamp"] = 0
    
    #update timestamp 
    oldTrustVector[actor]["time stamp"] = float(currentTrustVector[actor]["time stamp"])

    #message transit time
    currentTrustVector[actor]["message transit time"] = float(current_row[3])

    print("Done timekeeping")
    print()

'''
    this function is in charge of ... and takes in a full row from the csv file
    generated by the trust model data generator 
'''


#Reposnse for message count discreptency. high and low. (this is based
# on total message count) TS, DS, Total message, Total unexpected, com freq,
# tx_time, TSLC, none for ex message, time stamp, registration time, T_out,
# C_alrt, C_other (taken care of by other time out check) 

def response(current_row):
    actor = current_row[0]
    response_flag = 0
    print("----RESPONSE SECTION----")
    #to see where we are 
    print(currentTrustVector[actor]["total message count"])

    #check for Excessive TSLC check for Excessive TSLC 
    if (currentTrustVector[actor]["time since last communication"] > 
    threshDict_over["time since last communication"]):
        message = "Excessive time since last communication from " + actor
        DTM_response.append(message)
        response_flag = 1
        print(DTM_response)

    #check for low trust score 
    if (currentTrustVector[actor]["trust score"] < threshDict_under["trust score"] and 
    currentTrustVector[actor]["certainty"] > threshDict_under["trust score"] and
        currentTrustVector[actor]["relative factor of certainty"] > threshDict_under["relative factor of certainty"] and 
        currentTrustVector[actor]["distrust score"] > threshDict_over["distrust score"]):
        message = "Trust is low for " + actor
        DTM_response.append(message)
        response_flag = 1
        print(DTM_response)

    if (not response_flag):
        message = "Do nothing"
        DTM_response.append(message)
    
    currentTrustVector[actor]["DTM response"] = ' '.join(DTM_response)
    print("DTM response", currentTrustVector[actor]["DTM response"])
    DTM_response.clear()


'''
    this function prints the contents of the the MVoT to a userspecified CSV
    file
'''
def printToCSV(row,x): 

    d = {'Actor' : row[0], 
    'Message Eval Catagory' : row[1],
    'Current Time' : row[2],
    'Transit Time' : row[3]
    }
    actor = row[0]
    df2 = pd.DataFrame(row)
    print("df2", df2)
    
    #df1 = pd.DataFrame(d,index=range(len(d)))
    df1 = pd.DataFrame(d,index=range(len(d)-3))
    #df2 = df1.join(df2)
    print("df2 join", df2)
    df = pd.DataFrame(currentTrustVector[actor],index=range(int(len(currentTrustVector[actor].keys())/
    len(currentTrustVector[actor].values()))))
    print("df")
    print(df)
    df1 = df1.join(df)
    #df2 = df2.join(df)
    print("df1")
    print(df1.columns)
    
    if (x == 0):
        today = date.today()
        td = today.strftime("%d/%m/%Y")
        info = {'Name':args.file,
        'Data':td}
        #csv.writer('test1.csv', 'w', info)
        
        inf = pd.DataFrame(info, index = range(1))
        inf.to_csv(simOutFileName, index = False, mode = "a", header= False)
        df1.to_csv(simOutFileName, index = False, mode = "a")
        x += 1
    else:
        df1.to_csv(simOutFileName, index = False, mode = "a", header= False)
    
    temp = currentTrustVector[actor]
    k = temp.keys()
    #for k in temp:
    print(", ".join(k))
    print()
    val = []
    for k, v in temp.items():
        val.append(str(v))
    print(", ".join(val))
    

    data = currentTrustVector[actor]
    key = []
    val = []
    for k, v in data.items():
        key.append(k)
        pad = (len(k)- len(str(v)) ) * ' '
        val.append(pad + str(v))
    print(','.join(key))
    print(','.join(val))
#    for element in printActor:

def printClean():
    for K,V in currentTrustVector.items():
        print()
        #prints actor 
        print(K)

        #prints dicts associated with actor 
        for k,v in V.items():
            print(k,":",v)

def Time():
    global TIME
    TIME = TIME + TIMESTAMP
    return float(TIME)


'''
    this function is in charge of calculating the core MVoT values. It includes
    TS, C, DS, CommFreq, TSLC, TX time and avg_TX
'''

def calculation(current_row):
    actor = current_row[0]

    global n_AvgTX 
    n_AvgTX+= 1
    global n_SDTT 
    n_SDTT+= 1
    print("n_AvgTX", n_AvgTX)
    print(actor)

    #update old trust vector 
    oldTrustVector[actor]['certainty'] = currentTrustVector[actor]['certainty']
    oldTrustVector[actor]["trust score"] = currentTrustVector[actor]["trust score"]
    oldTrustVector[actor]["unexpected message count"] = currentTrustVector[actor]["unexpected message count"]
    oldTrustVector[actor]["average transit time"] = currentTrustVector[actor]["average transit time"]

    #calculate trust score 
    msgRatio = currentTrustVector[actor]["expected message count"] - (ALPHA * currentTrustVector[actor]["unexpected message count"])
    print("old certainty")
    print(ALPHA, "ALPHA")
    print(oldTrustVector[actor]["certainty"])
    currentTrustVector[actor]["trust score"] = msgRatio * currentTrustVector[actor]["certainty"]
    
    #calculate communication frequency 
    print(currentTrustVector[actor]["registration date"], "currentTrustVector[actor]['registration date']")
    we = time.time()
    print(float(we - currentTrustVector[actor]["registration date"]),"testtttttt")
    if((float(current_row[2]) - currentTrustVector[actor]["registration date"]) == 0):
        currentTrustVector[actor]["communication frequency"] = 0.001
    else:
        currentTrustVector[actor]["communication frequency"] = ((currentTrustVector[actor]["total message count"])/ 
        ((currentTrustVector[actor]["time stamp"] - currentTrustVector[actor]["registration date"])))
    print("comm freq", currentTrustVector[actor]["communication frequency"])
    

    #calculate relative factor of certainty  (RFC)
    print("expected message count", currentTrustVector[actor]["expected message count"])
    print("total message count",currentTrustVector[actor]["total message count"])
    currentTrustVector[actor]["relative factor of certainty"] = abs( 
        (currentTrustVector[actor]["expected message count"] / 
        currentTrustVector[actor]["total message count"]) - .5 ) * BETA

    #calculate certainty
    if (not currentTrustVector[actor]["time since last communication"] <= 0):
        print("ACTOR_MIN_TSLC[actor]",ACTOR_MIN_TSLC[actor])
        print("currentTrustVector[actor]['communication frequency']",currentTrustVector[actor]["communication frequency"])
        print("ACTOR_MAX_COMMFREQ[actor]",ACTOR_MAX_COMMFREQ[actor])
        print("currentTrustVector[actor]['time since last communication']",currentTrustVector[actor]["time since last communication"])
        currentTrustVector[actor]["certainty"] = (
            currentTrustVector[actor]["relative factor of certainty"] * (1 - math.exp(-GAMMA * 
            currentTrustVector[actor]["total message count"])) * 
            (currentTrustVector[actor]["communication frequency"]/ACTOR_MAX_COMMFREQ[actor]) * (ACTOR_MIN_TSLC[actor]/
            (currentTrustVector[actor]["time since last communication"])))
        if (currentTrustVector[actor]["certainty"] == 0):
            currentTrustVector[actor]["certainty"] = 0.1

        print(actor)
        print((1 - math.exp(-GAMMA * currentTrustVector[actor]["total message count"])), 
        "Gamma")
        print((currentTrustVector[actor]["communication frequency"]/ACTOR_MAX_COMMFREQ[actor]
        ), "(currentTrustVector[actor]['communication frequency']/ACTOR_MAX_COMMFREQ[actor])")
        print((ACTOR_MIN_TSLC[actor]/(currentTrustVector[actor]["time since last communication"]),
         "(MIN_TSLC/(currentTrustVector[actor]['time since last communication'])"))


    #calculate distrust
    currentTrustVector[actor]["distrust score"] = oldTrustVector[actor]["unexpected message count"] * currentTrustVector[actor]["certainty"]
    print(currentTrustVector[actor]["distrust score"], "currentTrustVector[actor]['distrust score']")
    
    #calculate average transit time
    currentTrustVector[actor]["average transit time"] = ((currentTrustVector[actor]["message transit time"] +
    n_AvgTX * oldTrustVector[actor]["average transit time"])/ (n_AvgTX + 1))
    
    #calculate standard deviation transit time 
    SD = ((n_SDTT * oldTrustVector[actor]["SD transit time"] ** 2 + (currentTrustVector[actor]["message transit time"] - 
    oldTrustVector[actor]["average transit time"]) * currentTrustVector[actor]["message transit time"] -
     currentTrustVector[actor]["average transit time"]) / 
    n_SDTT)
    print(currentTrustVector[actor]["total message count"], "MSG CNT")
    print(oldTrustVector[actor]["SD transit time"] ** 2, "SDTT ^2")
    print(currentTrustVector[actor]["message transit time"], "MSG TX")
    print(currentTrustVector[actor]["average transit time"], "AVG TX")
    print(SD, " SD")
    SD = abs(SD)
    currentTrustVector[actor]["SD transit time"] = math.sqrt(SD)
    

    

#main function
if (pathlib.Path(args.file).exists() == True):
    with open(args.file, mode='r') as csvFile:
        fileReader = csv.reader(csvFile)
        count = 0
        x = 0
        for row in fileReader:
            if (count > 0):
                #update message counters
                messageCount(row)
                #timekeeping new message print(oldTrustVector)
                timeKeeping(row)
                
                if (args.equation == "v1"):
                    #calculate MVoT
                    calculation(row)
                    #generate response
                    response(row)
                    #write to output csv file
                    printToCSV(row,x)
                    x += 1
                #response(row)
                
            if (args.debug == 'y'):
                input("Press Enter to continue...")
            count += 1
        print("count", count)
        printClean()
        print()
        print(currentTrustVector)

else:
    print("File does not exist")
    